import os
import subprocess
import threading
import time

# -------------------------------------Thread definition----------------------------------------------------------------

class myThread(threading.Thread):  # thread definition updated in python 3.0
    def __init__(self, threadID, name, adress, version):
        threading.Thread.__init__(self)
        self.threadID = threadID
        self.name = name
        self.adress = adress
        self.version = version

    def run(self):
        print("Starting " + self.name)
        run_scan(self.adress, self.name, self.version)
        print("Exiting " + self.name)


# ----------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------Methodes------------------------------------------------------------------

def run_scan(adress, threadName, version):  # scan def for threads to run
    print(threadName + " works")
    if (version == "1"):  # execute command in terminal from script
        stream = os.popen(
            'nmap -sV --script=vulscan -T2 -v -Pn -A ' + adress)  # --script vulscan is a custom script that connects vuln databases to check
    else:
        stream = os.popen(
            'nmap --script vuln -T2 -v -Pn -A ' + adress)  # --script vuln is a smaller script made by nmap itself, tests well but not all vuln are listed
    output = stream.read()
    adressfordocument = adress.replace(".", "_")
    adressfordocument = str(adressfordocument) + " version: " + str(version)
    t = open("Results/NetworkScan/" + adressfordocument + ".txt", "w+")  # make a text file with the name of the adress
    t.write(output)  # fill the text file
    t.close()


# ----------------------------------------------------------------------------------------------------------------------

approvedstart = False


print("Welcome to the PassCracker!")
ipToCrack = input("What is the ip that we will be cracking?")
print("Make sure the username list is filled in the Resources folder.")
start = input("are you ready? (yes/no)")
start = start.lower()

if (start == "yes"):
    approvedstart = True

if (approvedstart == True):
    subprocess.call(['xterm', '-e', 'python3 nmap'])
