import os
import threading
import time


class myThread(threading.Thread): 					   #thread definition updated in python 3.0
    def __init__(self, threadID, name, adress, version):
        threading.Thread.__init__(self)
        self.threadID = threadID
        self.name = name
        self.adress = adress
        self.version = version

    def run(self):
        print("Starting " + self.name)
        run_scan(self.adress, self.name, self.version)
        print("Exiting " + self.name)


def run_scan(adress, threadName, version): 					   #scan def for threads to run
    print(threadName + " works")
    if(version == "1"):                                                             #execute command in terminal from script
        stream = os.popen('nmap -sV --script=vulscan -T2 -v -Pn -A ' + adress)      #--script vulscan is a custom script that connects vuln databases to check
    else:
        stream = os.popen('nmap --script vuln -T2 -v -Pn -A ' + adress)             #--script vuln is a smaller script made by nmap itself, tests well but not all vuln are listed
    output = stream.read()
    adressfordocument = adress.replace(".", "_")
    adressfordocument = adressfordocument + " version: " + version
    f = open("Results/NetworkScan/" + adressfordocument + ".txt", "w+")		   #make a text file with the name of the adress
    f.write(output)							   #fill the text file
    f.close()

f = open("Resources/ipAdressesToScan")					   #get ip adresses from file
threads = []
threadnumber = 1
f1 = f.readlines()
approvedstart = False
version = 0

print("Ipscanner script 1.0 by Duncan Schoenmakers")
print("this script will scan " + str(len(f1)) + " items")
start = input("do you want to continue? (yes/no)")
start = start.lower();
if(start == "yes"):
    approvedstart = True

if(approvedstart == True):
    start2 = input("Do you want a full report of all possible vuln or a shorter easier to read list? (1 or 2)")
    if(start2 == "1"):
        version = 1
    elif(start2 == "2"):
        version = 2
    else:
        exit();
    for x in f1:
        while threading.activeCount() > 10:					   #dont go above 10 threads at the same time
            print("max threads achived, waiting for space")
            time.sleep(10)
        thread = myThread(1, "Thread-" + str(threadnumber), x)		   #creating thread
        thread.start()
        threads.append(thread)						   #add to pool
        threadnumber += 1

